//
//  File.swift
//
//
//  Created by  on 17.06.2021.
//
import Vapor
import telegram_vapor_bot

struct T: Decodable {
    let text: String
 
}

final class DefaultBotHandlers {
    
    static func addHandlers(app: Vapor.Application, bot: TGBotPrtcl) {
        defaultHandler(app: app, bot: bot)
        commandPingHandler(app: app, bot: bot)
//        commandCatHandler(app: app, bot: bot)
        commandStartHandler(app: app, bot: bot)
        commandPidrHandler(app: app, bot: bot)
    }
    
    
    private static func commandCatHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGCommandHandler(commands: ["/cat"]) { update, bot in
            app.http.client.shared.get(url: "https://cat-fact.herokuapp.com/facts").whenSuccess { result in
                guard let body = result.body, let data = body.getData(at: 0, length: body.readableBytes) else {
                    return
                }
                let jsonResponse = try? JSONSerialization.jsonObject(with: data, options: [])
                guard let jsonArray = jsonResponse as? [[String: Any]],
                      let title = jsonArray.randomElement()?["text"] as? String else {
                      return
                }
                try? update.message?.reply(text: title, bot: bot)
            }
        }
        bot.connection.dispatcher.add(handler)
    }
    
    private static func commandPidrHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGCommandHandler(commands: ["/pidr"]) { update, bot in
            try? update.message?.reply(text: "–°–∞–º –ø–∏–¥–æ—Ä) ", bot: bot)
        }
        bot.connection.dispatcher.add(handler)
    }
    
    private static func commandStartHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGCommandHandler(commands: ["/start"]) { update, bot in
            try? update.message?.reply(text: startText, bot: bot)
        }
        bot.connection.dispatcher.add(handler)
    }
    
    
    
    private static func defaultHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGMessageHandler(filters: (.all && !.command.names(["/ping"]))) { update, bot in
            guard update.message?.chat.id != -1001769149464 else { return }
            let message = "@\(update.message?.from?.username ?? "—Ö–∑"), —Å–æ–æ–±—â–µ–Ω–∏–µ: \(update.message?.text ?? "–æ—à–∏–±–∫–∞ –∫–∞–∫–∞—è-—Ç–æ...")"
            try? bot.sendMessage(params: .init(chatId: .chat(-1001769149464), text: message))
            print(update.message?.text)
        }
        bot.connection.dispatcher.add(handler)
    }
    
    private static func commandPingHandler(app: Vapor.Application, bot: TGBotPrtcl) {
        let handler = TGCommandHandler(commands: ["/ping"]) { update, bot in
            try update.message?.reply(text: "pong", bot: bot)
        }
        bot.connection.dispatcher.add(handler)
    }
}

let startText = """
–î–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é –∏ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
‚ñ™Ô∏è–Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç
‚ñ™Ô∏è–Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é
‚ñ™Ô∏è–º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –µ–µ –Ω–∞ –ø–ª–∞–≥–∏–∞—Ç
‚ñ™Ô∏è–ï—Å–ª–∏ –æ–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞ –º—ã –µ–µ –æ–ø—É–±–ª–∏–∫—É–µ–º –∏ –æ–ø–ª–∞—Ç–∏–º —Ä–∞—Å—Å–∫–∞–∑ ;)
–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–ª–∞–≥–∏–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –±—ã–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ –≤–ø–µ—Ä–≤—ã–µ –≤ —Å–µ—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –±—ã–ª–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π.
–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –≤ –∫–æ–Ω—Ü–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –≤–∞—à–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µü§ë
"""
